use std.io
use std.array
use src.lexer
use src.parser

struct Binding {
   name Token
   value int
}

struct Bindings {
   data *Binding
   count int
   capacity int
}

fn bindings_find(bindings *Bindings, name Token, value *int) bool {
   for let i = 0, i < bindings.count, i += 1 {
      if bindings.data[i].name.str == name.str {
         *value = bindings.data[i].value
         return true
      }
   }
   return false
}

assert COUNT_NODES == 11
fn bindings_substitute(bindings *Bindings, expr int) int {
   match nodes[expr].kind {
      NODE_SYM => return expr
      NODE_VAR => {
         let value int
         if bindings_find(bindings, nodes[expr].token, &value) {
            return value
         }
         return expr
      }
      NODE_FUN => {
         let new_name Token
         let value int
         if bindings_find(bindings, nodes[expr].token, &value) {
            if nodes[value].kind != NODE_SYM {
               &stderr << "error: expected symbol in the place of the functor name\n"
               exit(1)
            }
            new_name = nodes[value].token
         } else {
            new_name = nodes[expr].token
         }
         let new_fun = node_new(NODE_FUN, new_name)
         let new_args = &nodes[new_fun].nodes[NODE_FUN_ARGS]
         for let arg = nodes[expr].nodes[NODE_FUN_ARGS], arg != 0, arg = nodes[arg].next {
            new_args = node_list_push(new_args, bindings_substitute(bindings, arg))
            nodes[*new_args].next = 0
         }
         return new_fun
      }
      NODE_BINARY => {
         nodes[expr].nodes[NODE_BINARY_LHS] = bindings_substitute(bindings, nodes[expr].nodes[NODE_BINARY_LHS])
         nodes[expr].nodes[NODE_BINARY_RHS] = bindings_substitute(bindings, nodes[expr].nodes[NODE_BINARY_RHS])
         return expr
      }
      NODE_UNARY => {
         nodes[expr].nodes[NODE_UNARY_EXPR] = bindings_substitute(bindings, nodes[expr].nodes[NODE_UNARY_EXPR])
         return expr
      }
   }
   assert false
   return expr
}

assert COUNT_NODES == 11
fn pattern_match(pattern int, value int, bindings *Bindings) bool {
   if nodes[pattern].kind == NODE_SYM && nodes[value].kind == NODE_SYM {
      return nodes[pattern].token.str == nodes[value].token.str
   } else if nodes[pattern].kind == NODE_VAR {
      let bound_value int
      if nodes[pattern].token.str == "_" {
         return true
      } else if bindings_find(bindings, nodes[pattern].token, &bound_value) {
         return nodes[bound_value].token.str == nodes[value].token.str
      } else {
         let binding Binding
         binding.name = nodes[pattern].token
         binding.value = value
         *(array_push(&bindings.data as **char, &bindings.count, &bindings.capacity, sizeof(Binding)) as *Binding) = binding
         return true
      }
   } else if nodes[pattern].kind == NODE_FUN && nodes[value].kind == NODE_FUN {
      if nodes[pattern].token.str == nodes[value].token.str && nodes[pattern].token.data == nodes[value].token.data {
         let pattern_arg = nodes[pattern].nodes[NODE_FUN_ARGS]
         let value_arg = nodes[value].nodes[NODE_FUN_ARGS]
         for pattern_arg != 0 && value_arg != 0 {
            if !pattern_match(pattern_arg, value_arg, bindings) {
               return false
            }
            pattern_arg = nodes[pattern_arg].next
            value_arg = nodes[value_arg].next
         }
         return pattern_arg == 0 && value_arg == 0
      }
   } else if nodes[pattern].kind == NODE_BINARY && nodes[value].kind == NODE_BINARY {
      return nodes[pattern].token.str == nodes[value].token.str && pattern_match(nodes[pattern].nodes[NODE_BINARY_LHS], nodes[value].nodes[NODE_BINARY_LHS], bindings) && pattern_match(nodes[pattern].nodes[NODE_BINARY_RHS], nodes[value].nodes[NODE_BINARY_RHS], bindings)
   } else if nodes[pattern].kind == NODE_UNARY && nodes[value].kind == NODE_UNARY {
      return nodes[pattern].token.str == nodes[value].token.str && pattern_match(nodes[pattern].nodes[NODE_UNARY_EXPR], nodes[value].nodes[NODE_UNARY_EXPR], bindings)
   }
   return false
}

alias Action int
const (
   ACTION_SKIP
   ACTION_APPLY
)

alias State int
const (
   STATE_BAIL
   STATE_CONT
   STATE_HALT
)

struct Resolution {
   action Action
   state State
}

fn strategy_matched(strategy int) Resolution {
   let resolution Resolution
   if nodes[strategy].token.kind == TOKEN_ALL {
      resolution.action = ACTION_APPLY
      resolution.state = STATE_BAIL
   } else if nodes[strategy].token.kind == TOKEN_FIRST {
      resolution.action = ACTION_APPLY
      resolution.state = STATE_HALT
   } else {
      assert false
   }
   return resolution
}

assert COUNT_NODES == 11
fn rule_apply(rule int, expr int, strategy int, halt *bool) int {
   let bindings Bindings
   bindings.data = 0 as *Binding
   bindings.count = 0
   bindings.capacity = 0

   if pattern_match(nodes[rule].nodes[NODE_RULE_HEAD], expr, &bindings) {
      let resolution = strategy_matched(strategy)
      let new_expr int
      match resolution.action {
         ACTION_APPLY => new_expr = bindings_substitute(&bindings, nodes[rule].nodes[NODE_RULE_BODY])
         ACTION_SKIP => new_expr = expr
      }
      match resolution.state {
         STATE_BAIL => {
            *halt = false
            return new_expr
         }
         STATE_CONT => return rule_apply(rule, new_expr, strategy, halt)
         STATE_HALT => {
            *halt = true
            return new_expr
         }
      }
   } else {
      match nodes[expr].kind {
         NODE_SYM, NODE_VAR => {
            *halt = false
            return expr
         }
         NODE_FUN => {
            let halt_args = false
            let new_fun = node_new(NODE_FUN, nodes[expr].token)
            let new_args = &nodes[new_fun].nodes[NODE_FUN_ARGS]
            for let arg = nodes[expr].nodes[NODE_FUN_ARGS], arg != 0, arg = nodes[arg].next {
               if halt_args {
                  new_args = node_list_push(new_args, arg)
               } else {
                  new_args = node_list_push(new_args, rule_apply(rule, arg, strategy, &halt_args))
               }
            }
            *halt = false
            return new_fun
         }
         NODE_BINARY => {
            nodes[expr].nodes[NODE_BINARY_LHS] = rule_apply(rule, nodes[expr].nodes[NODE_BINARY_LHS], strategy, halt)
            if *halt { return expr }
            nodes[expr].nodes[NODE_BINARY_RHS] = rule_apply(rule, nodes[expr].nodes[NODE_BINARY_RHS], strategy, halt)
            return expr
         }
         NODE_UNARY => {
            nodes[expr].nodes[NODE_UNARY_EXPR] = rule_apply(rule, nodes[expr].nodes[NODE_UNARY_EXPR], strategy, halt)
            return expr
         }
      }
   }
   assert false
   return 0
}

struct Rule {
   name Token
   rule int
}

struct Context {
   rules *Rule
   rules_count int
   rules_capacity int
   curr_expr int
   in_shape bool
   shaping_history *int
   shaping_history_count int
   shaping_history_capacity int
}

fn context_new() Context {
   let context Context
   context.rules = 0 as *Rule
   context.rules_count = 0
   context.rules_capacity = 0
   context.curr_expr = 0
   context.in_shape = false
   context.shaping_history = 0 as *int
   context.shaping_history_count = 0
   context.shaping_history_capacity = 0
   return context
}

fn context_rules_find(context *Context, name Token, rule *int) bool {
   for let i = 0, i < context.rules_count, i += 1 {
      if context.rules[i].name.str == name.str {
         *rule = context.rules[i].rule
         return true
      }
   }
   return false
}

fn context_process_command(context *Context) bool {
   let stmt int
   if !parse_stmt(false, &stmt) { return false }

   if in_repl {
      match nodes[stmt].kind {
         NODE_UNDO => {
            if !context.in_shape {
               &stderr << "error: no shaping in place\n"
               return false
            }
            if context.shaping_history_count > 0 {
               context.shaping_history_count -= 1
               context.curr_expr = context.shaping_history[context.shaping_history_count]
               &stdout << " => " << nodes[context.curr_expr] << "\n"
            } else {
               &stderr << "error: no history\n"
               return false
            }
            return true
         }
         NODE_QUIT => exit(0)
      }
   }

   match nodes[stmt].kind {
      NODE_RULE => {
         let name = nodes[nodes[stmt].nodes[NODE_RULE_NAME]].token
         let existing_rule int
         if context_rules_find(context, name, &existing_rule) {
            &stderr << name.pos << "error: redefinition of existing rule '" << name.str << "'\n"
            return false
         }
         let rule Rule
         rule.name = name
         rule.rule = stmt
         *(array_push(&context.rules as **char, &context.rules_count, &context.rules_capacity, sizeof(Rule)) as *Rule) = rule
      }
      NODE_SHAPE => {
         if context.in_shape {
            &stderr << "error: already shaping an expression\n"
            return false
         }
         let expr = nodes[stmt].nodes[NODE_SHAPE_EXPR]
         &stdout << " => " << nodes[expr] << "\n"
         context.curr_expr = expr
         context.in_shape = true
      }
      NODE_APPLY => {
         if !context.in_shape {
            &stdout << "error: no shaping in place\n"
            return false
         }
         let rule int
         match nodes[nodes[stmt].nodes[NODE_APPLY_RULE]].kind {
            NODE_RULE => rule = nodes[stmt].nodes[NODE_APPLY_RULE]
            NODE_SYM => {
               if !context_rules_find(context, nodes[nodes[stmt].nodes[NODE_APPLY_RULE]].token, &rule) {
                  &stderr << "error: rule '" << nodes[nodes[stmt].nodes[NODE_APPLY_RULE]].token.str << "' does not exist\n"
                  return false
               }
            }
         }
         *(array_push(&context.shaping_history as **char, &context.shaping_history_count, &context.shaping_history_capacity, sizeof(int)) as *int) = context.curr_expr
         let halt bool
         let expr = rule_apply(rule, context.curr_expr, nodes[stmt].nodes[NODE_APPLY_STRATEGY], &halt)
         &stdout << " => " << nodes[expr] << "\n"
         context.curr_expr = expr
      }
      NODE_DONE => {
         if !context.in_shape {
            &stdout << "error: no shaping in place\n"
            return false
         }
         context.in_shape = false
         context.shaping_history_count = 0
      }
      else => {
         &stderr << nodes[stmt].token.pos << "error: expected command, got " << nodes[stmt].token << "\n"
         return false
      }
   }

   return true
}

fn read_line(fd int) Str {
   let buf = 0 as *char
   let buf_count = 0
   let buf_capacity = 0

   let ch char
   for true {
      if read(fd, &ch, 1) <= 0 {
         break
      }

      *array_push(&buf, &buf_count, &buf_capacity, sizeof(char)) = ch
      if ch == '\n' {
         break
      }
   }

   let str Str
   str.data = buf
   str.size = buf_count
   return str
}

fn main() {
   let context = context_new()
   if argc > 0 {
      if !lexer_open(argv[0]) { exit(1) }
      let is_eof bool
      if !lexer_read(TOKEN_EOF, &is_eof) { exit(1) }
      for !is_eof {
         if !context_process_command(&context) { exit(1) }
         if !lexer_read(TOKEN_EOF, &is_eof) { exit(1) }
      }
   } else {
      in_repl = true
      for true {
         if context.in_shape {
            prompt = "> "
         } else {
            prompt = "teo> "
         }
         &stdout << prompt
         let line = read_line(STDIN)
         if line.size == 0 { &stdout << "\n" break }
         if line.size > 1 {
            lexer_from_str(line, "<stdin>")
            context_process_command(&context)
         }
      }
   }
}
